rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for authentication and authorization
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isEmailVerified() {
      return isSignedIn() && request.auth.token.email_verified == true;
    }

    function isAdmin() {
      return isSignedIn() &&
             isEmailVerified() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isModerator() {
      return isSignedIn() &&
             isEmailVerified() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'moderator' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    function isValidUser() {
      return isSignedIn() &&
             isEmailVerified() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'active';
    }

    // User profiles collection
    match /users/{uid} {
      // Users can read their own profile
      allow read: if isOwner(uid);

      // Users can create their own profile during registration
      allow create: if isSignedIn() &&
                      request.auth.uid == uid &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['email', 'role', 'status', 'createdAt', 'emailVerified']) &&
                      // Ensure email matches auth email
                      request.resource.data.email == request.auth.token.email &&
                      // Only allow citizen role on creation
                      request.resource.data.role == 'citizen' &&
                      // Only allow pending_verification status on creation
                      request.resource.data.status == 'pending_verification' &&
                      // Ensure emailVerified matches auth status
                      request.resource.data.emailVerified == request.auth.token.email_verified;

      // Users can update their own profile (limited fields)
      allow update: if isOwner(uid) &&
                      // Can only update these fields as regular user
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'phoneNumber', 'photoUrl', 'updatedAt', 'emailVerified', 'status']) &&
                      // Email verification status must match auth
                      ((!request.resource.data.diff(resource.data).affectedKeys().hasAny(['emailVerified'])) ||
                       request.resource.data.emailVerified == request.auth.token.email_verified) &&
                      // Status can only be updated to active when email is verified
                      ((!request.resource.data.diff(resource.data).affectedKeys().hasAny(['status'])) ||
                       (request.resource.data.emailVerified == true && request.resource.data.status == 'active'));

      // Admins can update any user profile
      allow update: if isAdmin();

      // Users can delete their own profile
      allow delete: if isOwner(uid);

      // Admins can delete any user profile
      allow delete: if isAdmin();

      // Admins and moderators can read any user profile
      allow read: if isModerator();
    }

    // Environmental reports collection
    match /reports/{reportId} {
      // Anyone can read reports (for public visibility of environmental issues)
      allow read: if true;

      // Only verified users can create reports
      allow create: if isValidUser() &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['userId', 'email', 'ubicacion', 'clasificacion', 'estado', 'prioridad', 'createdAt']) &&
                      // Ensure user ID matches auth
                      request.resource.data.userId == request.auth.uid &&
                      // Ensure email matches auth
                      request.resource.data.email == request.auth.token.email &&
                      // Validate status is initial state
                      request.resource.data.estado in ['Pendiente', 'pendiente'] &&
                      // Validate priority values
                      request.resource.data.prioridad in ['Alta', 'Media', 'Baja', 'alta', 'media', 'baja'];

      // Report creators can update their own reports (limited fields)
      allow update: if isValidUser() &&
                      resource.data.userId == request.auth.uid &&
                      // Can only update these fields as report creator
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ubicacion', 'clasificacion', 'descripcion', 'fotoUrl', 'updatedAt']) &&
                      // Cannot change status or other system fields
                      request.resource.data.estado == resource.data.estado;

      // Moderators can update report status and other fields
      allow update: if isModerator();

      // Report creators can delete their own reports (only if pending)
      allow delete: if isValidUser() &&
                      resource.data.userId == request.auth.uid &&
                      resource.data.estado in ['Pendiente', 'pendiente'];

      // Admins can delete any report
      allow delete: if isAdmin();
    }

    // System notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;

      // System can create notifications (server-side via Admin SDK)
      allow create: if false; // Only server-side creation allowed

      // Users can update their own notifications (mark as read, etc.)
      allow update: if isSignedIn() &&
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);

      // Users can delete their own notifications
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;

      // Admins can manage all notifications
      allow read, update, delete: if isAdmin();
    }

    // Application settings collection (admin only)
    match /settings/{settingId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Analytics and statistics collection (read-only for users)
    match /analytics/{document=**} {
      allow read: if isValidUser();
      allow write: if isAdmin();
    }

    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}