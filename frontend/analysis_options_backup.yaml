# EcoTrack - Advanced Static Code Analysis Configuration
# This file configures multiple static analysis tools for Flutter/Dart
# to ensure code quality, consistency, and best practices.
#
# Tools configured:
# 1. flutter_lints - Official Flutter linting rules
# 2. dart_code_metrics - Advanced metrics and complexity analysis
# 3. Custom rules - Project-specific standards enforcement
#
# The analyzer can be invoked from command line: flutter analyze

# Base configuration from Flutter team's recommended lints
include: package:flutter_lints/flutter.yaml

# Dart Code Metrics configuration for advanced analysis
dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    cyclomatic-complexity: 20
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 50
  metrics-exclude:
    - test/**
  rules:
    - no-boolean-literal-compare
    - no-empty-block
    - prefer-trailing-comma
    - prefer-conditional-expressions
    - no-equal-then-else
    - prefer-moving-to-variable
    - prefer-match-file-name
    - member-ordering:
        alphabetize: true
        order:
          - public-fields
          - private-fields
          - constructors
          - public-getters
          - private-getters
          - public-methods
          - private-methods

analyzer:
  # Exclude generated files and build directories
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/generated_plugin_registrant.dart"
    - "build/**"
    - "ios/**"
    - "android/**"
    - "web/**"
    - "linux/**"
    - "macos/**"
    - "windows/**"
  
  # Strong analysis mode for better error detection
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  
  # Language features
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

linter:
  # Comprehensive set of lint rules for code quality
  rules:
    # Style rules - Enforce naming conventions
    camel_case_types: true
    camel_case_extensions: true
    file_names: true
    library_names: true
    library_prefixes: true
    package_names: true
    constant_identifier_names: true
    non_constant_identifier_names: true
    
    # Documentation rules
    public_member_api_docs: true
    package_api_docs: true
    
    # Design rules
    use_build_context_synchronously: true
    avoid_print: true
    avoid_unnecessary_containers: true
    avoid_web_libraries_in_flutter: true
    no_logic_in_create_state: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_single_quotes: true
    require_trailing_commas: true
    sized_box_for_whitespace: true
    sort_child_properties_last: true
    use_colored_box: true
    use_decorated_box: true
    use_full_hex_values_for_flutter_colors: true
    use_key_in_widget_constructors: true
    
    # Error prevention
    always_use_package_imports: true
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_relative_lib_imports: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    cancel_subscriptions: true
    close_sinks: true
    comment_references: true
    control_flow_in_finally: true
    empty_statements: true
    hash_and_equals: true
    invariant_booleans: true
    iterable_contains_unrelated_type: true
    list_remove_unrelated_type: true
    literal_only_boolean_expressions: true
    no_adjacent_strings_in_list: true
    no_duplicate_case_values: true
    prefer_void_to_null: true
    test_types_in_equals: true
    throw_in_finally: true
    unnecessary_statements: true
    unrelated_type_equality_checks: true
    valid_regexps: true
    
    # Performance
    avoid_function_literals_in_foreach_calls: true
    prefer_collection_literals: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_spread_collections: true
    
    # Clarity
    avoid_bool_literals_in_conditional_expressions: true
    avoid_catches_without_on_clauses: true
    avoid_catching_errors: true
    avoid_double_and_int_checks: true
    avoid_field_initializers_in_const_classes: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    avoid_null_checks_in_equality_operators: true
    avoid_positional_boolean_parameters: true
    avoid_redundant_argument_values: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_returning_null: true
    avoid_returning_null_for_future: true
    avoid_returning_null_for_void: true
    avoid_returning_this: true
    avoid_setters_without_getters: true
    avoid_shadowing_type_parameters: true
    avoid_single_cascade_in_expression_statements: true
    avoid_types_on_closure_parameters: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    cascade_invocations: true
    directives_ordering: true
    join_return_with_assignment: true
    missing_whitespace_between_adjacent_strings: true
    omit_local_variable_types: true
    prefer_adjacent_string_concatenation: true
    prefer_asserts_in_initializer_lists: true
    prefer_asserts_with_message: true
    prefer_expression_function_bodies: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_foreach: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_null_aware_operators: true
    prefer_typing_uninitialized_variables: true
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_checks: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    use_function_type_syntax_for_parameters: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    use_string_buffers: true
    use_to_and_as_if_applicable: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
